[project]
name = "{{cookiecutter.project_name}}"
version = "0.0.1"
description = "{{cookiecutter.project_description}}"
authors = [{ name = "{{cookiecutter.author}}", email = "{{cookiecutter.email}}" }]
readme = "README.md"
keywords = ["python"]
requires-python = ">=3.9,<4.0"
dependencies = [
{% if cookiecutter.cli_tool == "y" %}
    "click>=8.1.1",
{% endif %}
]
license = { text = "MIT" }
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Homepage = "https://{{cookiecutter.github_username}}.github.io/{{cookiecutter.project_name}}/"
Repository = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_name}}"
Documentation = "https://{{cookiecutter.github_username}}.github.io/{{cookiecutter.project_name}}/"

{% if cookiecutter.cli_tool == "y" %}
[project.scripts]
{{cookiecutter.project_slug}} = "{{cookiecutter.project_slug}}.cli:main"

{% endif %}
[dependency-groups]
dev = [
    "pytest>=7.2.0",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    "ruff>=0.11.5",
    "mypy>=1.0.0",
    {% if cookiecutter.deptry == 'y' %}"deptry>=0.23.0",{% endif %}
    {% if cookiecutter.codecov == 'y' %}"pytest-cov>=4.0.0",{% endif %}
    "refurb>=1.28.0",
    "vulture>=2.7",
    "safety>=2.3.5",
    {% if cookiecutter.cli_tool == 'y' %}"cogapp>=3.3.0",{% endif %}
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"
path = "{{cookiecutter.project_slug}}/_version.py"

[tool.hatch.version.raw-options]
version_scheme = "guess-next-dev"
local_scheme = "node-and-date"

[tool.mypy]
files = [
    "{{cookiecutter.project_slug}}"
]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py39"
line-length = 120
fix = true
exclude = ["__init__.py"]

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort (keep this if you want Ruff to sort imports)
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff-native rules
    "RUF",
    # try/except linting
    "TRY",
]
ignore = [
    "E501", # Line too long
    "E731", # Do not assign a lambda expression
    "E203", # Whitespace before ':'
    "W503", # Line break before binary operator
    "W605", # Invalid escape sequence
    "F821", # Undefined name
    "C901", # Function is too complex
    "B904", # Exception chaining advice
    "N813", # CamelCase imported as lowercase
    "B903", # Suggest using __slots__ or immutability
    "N801", # Class name should use CapWords
    "N802", # Function name should be lowercase
    "N818", # Exception name should end in 'Error'
    "B950", # Line too long (conflicts with Black)
    "F401", # Imported but unused
    "B907"   # Prefer `!r` over manual repr wrapping
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.format]
preview = true

{% if cookiecutter.codecov == "y"-%}
# Configuration for coverage.py
[tool.coverage.report]
show_missing = true
skip_covered = true
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.run]
branch = true
omit = ["{{cookiecutter.project_slug}}/__main__.py"]
source = [
    "{{cookiecutter.project_slug}}"
]

{% endif %}
[tool.black]
line-length = 100
target-version = ["py39"]

[tool.pre-commit.default_language_versions]
python = "3.11"

[tool.tox]
min_version = "4.0"
env_list = ["py39", "py310", "py311", "py312", "py313"]
skipsdist = true

[tool.tox.root]
skipsdist = true

[tool.tox-gh-actions]
python = { "3.9" = "py39", "3.10" = "py310", "3.11" = "py311", "3.12" = "py312", "3.13" = "py313" }

[tool.tox.env.py39]
pass_env = ["PYTHON_VERSION"]
allowlist_externals = ["uv"]
commands = [
  ["uv", "sync", "--python", "{envpython}"],
  ["uv", "run", "python", "-m", "pytest", "tests", "--cov", "--cov-config=pyproject.toml", "--cov-report=xml"],
  ["uv", "run", "mypy"]
]

[tool.tox.env.py310]
inherits = "py39"

[tool.tox.env.py311]
inherits = "py39"

[tool.tox.env.py312]
inherits = "py39"

[tool.tox.env.py313]
inherits = "py39"
