[project]
name = "{{cookiecutter.project_name}}"
dynamic = ["version"]
description = "{{cookiecutter.project_description}}"
authors = [{ name = "{{cookiecutter.author}}", email = "{{cookiecutter.email}}" }]
readme = "README.md"
keywords = ["python"]
requires-python = ">=3.9,<4.0"
dependencies = [{% if cookiecutter.cli_tool == "y" %}"click>=8.1.1", {% endif %}]
license = { text = "MIT" }
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    {% if cookiecutter.cli_tool == "y" -%}
    "Environment :: Console",
    {% endif -%}
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[project.urls]
Homepage = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_name}}"
Repository = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_name}}"
Documentation = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_name}}/blob/main/README.md"
Changelog = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_name}}/blob/main/CHANGELOG.md"
Bug-Tracker = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_name}}/issues"
CI = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_name}}/actions"

{% if cookiecutter.cli_tool == "y" -%}
[project.scripts]
{{cookiecutter.project_slug}} = "{{cookiecutter.project_slug}}.__main__:main"

{% endif -%}
[dependency-groups]
dev = [
    "ipdb",
    "uv",
    "tox",
    "tox-uv",
    "tox-gh-actions",
    "pytest",
    {% if cookiecutter.codecov == "y" -%}
    "pytest-cov",
    {% endif -%}
    "pre-commit",
    "black",
    "ruff",
    "pip-audit",
    "bandit[toml]",
    "codespell",
    "mypy",
    "vulture",
    "deptry",
    {% if cookiecutter.cli_tool == "y" -%}
    "cogapp",
    {% endif -%}
    "twine",
    "hatch",
]

[build-system]
requires = ["hatchling", "hatch-timestamp-version"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "{{cookiecutter.project_slug}}/_version.py"
source = "vcs-dev-timestamp"
validate-bump = true

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"
timestamp_format = "long"

[tool.hatch.build.targets.wheel]
packages = ["{{cookiecutter.project_slug}}"]

[tool.hatch.build.targets.editable]
packages = ["{{cookiecutter.project_slug}}"]

[tool.hatch.envs.default]
path = ".venv"

[tool.uv]
default-groups = "all"

[tool.mypy]
files = [
    "{{cookiecutter.project_slug}}"
]
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
ignore_missing_imports = true
follow_imports = "silent"
disable_error_code = ["import-untyped"]

[tool.pytest.ini_options]
tmp_path_retention_policy = "failed"
testpaths = ["tests"]
addopts = "--capture=tee-sys --tb=native -p no:warnings -ra -vv"
markers = [
    "integration:Run integration tests",
    "smoke:Run the smoke tests",
    "unit:Run the unit tests",
]
norecursedirs = [
    ".git",
    ".idea",
]
filterwarnings = [
    "ignore:.+:DeprecationWarning"
]

{% if cookiecutter.codecov == "y" -%}
# Configuration for coverage.py
[tool.coverage.report]
show_missing = true
skip_covered = true
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.run]
branch = true
omit = ["{{cookiecutter.project_slug}}/__main__.py"]
source = [
    "{{cookiecutter.project_slug}}"
]

[tool.coverage.html]
show_contexts = true

{% endif -%}
[tool.ruff]
target-version = "py39"
line-length = 100
fix = true
unsafe-fixes = true
exclude = [".venv", "__init__.py"]

[tool.ruff.lint]
fixable = ["ALL"]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort (keep this if you want Ruff to sort imports)
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pep8-naming rules
    "N",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff-native rules
    "RUF",
    # try/except linting
    "TRY",
    # Disallow print statements
    "T201",
]
ignore = [
    "C901", # Function is too complex
    "PGH003" # blanket-type-ignore
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
"scripts/*.py" = ["T201"]

[tool.ruff.lint.isort]
known-first-party = ["{{cookiecutter.project_slug}}", "tests"]
force-sort-within-sections = true

[tool.black]
line-length = 100
target-version = ["py39"]

[tool.codespell]
ignore-words = "codespell.txt"
skip = '*.pyc,*.xml,*.gif,*.png,*.jpg,*.js,*.html,*.json,*.gz,Makefile'
quiet-level = 3

[tool.bandit]
targets = ["{{cookiecutter.project_slug}}"]
exclude_dirs = ["venv", ".venv", "tests"]

[tool.vulture]
paths = ["{{cookiecutter.project_slug}}", "tests"]
min_confidence = 80
sort_by_size = true
exclude = ["venv/", ".venv/"]

[tool.deptry]
exclude = ["venv/.*", ".venv/.*", "tests/.*"]

[tool.pre-commit.default_language_versions]
python = "3.13"
