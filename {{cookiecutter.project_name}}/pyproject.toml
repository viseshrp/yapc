[project]
name = "{{cookiecutter.project_name}}"
version = "0.0.1"
description = "{{cookiecutter.project_description}}"
authors = [{ name = "{{cookiecutter.author}}", email = "{{cookiecutter.email}}" }]
readme = "README.md"
keywords = ["python"]
requires-python = ">=3.9,<4.0"
{% if cookiecutter.open_source_license == "MIT license" %}
license = { text = "MIT" }
{% elif cookiecutter.open_source_license == "BSD license" %}
license = { text = "BSD-3-Clause" }
{% elif cookiecutter.open_source_license == "ISC license" %}
license = { text = "ISC" }
{% elif cookiecutter.open_source_license == "Apache Software License 2.0" %}
license = { text = "Apache-2.0" }
{% elif cookiecutter.open_source_license == "GNU General Public License v3" %}
license = { text = "GPL-3.0-only" }
{% endif %}
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Homepage = "https://{{cookiecutter.author_github_handle}}.github.io/{{cookiecutter.project_name}}/"
Repository = "https://github.com/{{cookiecutter.author_github_handle}}/{{cookiecutter.project_name}}"
Documentation = "https://{{cookiecutter.author_github_handle}}.github.io/{{cookiecutter.project_name}}/"

[dependency-groups]
dev = [
    "pytest>=7.2.0",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    {% if cookiecutter.deptry == 'y' %}"deptry>=0.22.0",{% endif %}
    "mypy>=0.991",
    {% if cookiecutter.codecov == 'y' %}"pytest-cov>=4.0.0",{% endif %}
    "ruff>=0.9.2",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"
path = "{{cookiecutter.project_slug}}/_version.py"

[tool.hatch.version.raw-options]
version_scheme = "guess-next-dev"
local_scheme = "node-and-date"

[tool.mypy]
files = [
    "{{cookiecutter.project_slug}}"
]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py39"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort (keep this if you want Ruff to sort imports)
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff-native rules
    "RUF",
    # try/except linting
    "TRY",
]
ignore = [
    "E501",  # Line too long
    "E731",  # Do not assign a lambda expression
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.format]
preview = true

{% if cookiecutter.codecov == "y"-%}
[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.run]
branch = true
omit = ["{{cookiecutter.project_slug}}/__main__.py"]
source = [
    "{{cookiecutter.project_slug}}"
]
{% endif %}

[tool.black]
line-length = 100
target-version = ["py39"]

[tool.pre-commit.default_language_versions]
python = "3.11"
